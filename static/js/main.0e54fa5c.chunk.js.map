{"version":3,"sources":["common/password.js","password-generator/PasswordOptions.js","password-generator/PasswordLength.js","password-generator/PasswordGenerator.js","App.js","serviceWorker.js","index.js"],"names":["symbols","getCharacterList","options","characterList","uppercase","push","lowercase","numbers","module","exports","generate","size","result","length","i","selectedList","Math","floor","random","uppercaseAlphanumeric","alphanumeric","PasswordOptions","props","checkboxChanged","event","changeHandler","target","name","checked","FormGroup","FormControlLabel","control","Checkbox","onChange","color","label","PasswordLength","Typography","gutterBottom","TextField","type","value","useStyles","makeStyles","theme","root","margin","spacing","padding","passwordContainer","marginBottom","PasswordGenerator","classes","useState","setSize","setOptions","password","setPassword","refreshPassword","_options","_size","Grid","container","direction","className","justify","Box","Button","onClick","navigator","clipboard","writeText","App","Container","maxWidth","fixed","variant","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0e54fa5c.chunk.js","sourcesContent":["const uppercaseAlphanumeric = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst alphanumeric = 'abcdefghijklmnopqrstuvwxyz';\nconst numbers = '1234567890';\nconst symbols = `\\`~!@#$%^&*()_-+={}[]\\\\|:;\"'<>,.?/`;\n\nfunction generate(options, size = 9) {\n  const characterList = getCharacterList(options);\n  let result = '';\n\n  if (!characterList.length) {\n    return result;\n  }\n\n  for (let i = 0; i < size; i++) {\n    const selectedList =\n      characterList[Math.floor(Math.random() * characterList.length)];\n    result += selectedList[Math.floor(Math.random() * selectedList.length)];\n  }\n\n  return result;\n}\n\nfunction getCharacterList(options) {\n  let characterList = [];\n\n  if (options.uppercase) {\n    characterList.push(uppercaseAlphanumeric);\n  }\n\n  if (options.lowercase) {\n    characterList.push(alphanumeric);\n  }\n\n  if (options.numbers) {\n    characterList.push(numbers);\n  }\n\n  if (options.symbols) {\n    characterList.push(symbols);\n  }\n\n  return characterList;\n}\n\nmodule.exports = {\n  generate,\n  uppercaseAlphanumeric,\n  alphanumeric,\n  numbers,\n  symbols,\n};\n","import React from 'react';\nimport { Checkbox, FormControlLabel, FormGroup } from '@material-ui/core';\n\nexport default function PasswordOptions(props) {\n  const options = props.options;\n\n  function checkboxChanged(event) {\n    props.changeHandler({\n      ...props.options,\n      [event.target.name]: event.target.checked,\n    });\n  }\n\n  return (\n    <FormGroup>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={options.uppercase}\n            onChange={checkboxChanged}\n            name=\"uppercase\"\n            color=\"secondary\"\n          />\n        }\n        label=\"Uppercase\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={options.lowercase}\n            onChange={checkboxChanged}\n            name=\"lowercase\"\n            color=\"secondary\"\n          />\n        }\n        label=\"Lowercase\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={options.numbers}\n            onChange={checkboxChanged}\n            name=\"numbers\"\n            color=\"secondary\"\n          />\n        }\n        label=\"Numbers\"\n      />\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={options.symbols}\n            onChange={checkboxChanged}\n            name=\"symbols\"\n            color=\"secondary\"\n          />\n        }\n        label=\"Symbols\"\n      />\n    </FormGroup>\n  );\n}\n","import React from 'react';\nimport { Typography, FormGroup, TextField } from '@material-ui/core';\n\nexport default function PasswordLength(props) {\n  const handleChange = (event) => {\n    props.changeHandler(event.target.value);\n  };\n\n  return (\n    <FormGroup>\n      <Typography gutterBottom>Password Length</Typography>\n      <TextField type=\"number\" value={props.size} onChange={handleChange} />\n    </FormGroup>\n  );\n}\n","import React, { useState } from 'react';\nimport { generate } from '../common/password';\nimport { Box, Grid, Button, Typography, makeStyles } from '@material-ui/core';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport Refresh from '@material-ui/icons/Refresh';\nimport PasswordOptions from './PasswordOptions';\nimport PasswordLength from './PasswordLength';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    margin: theme.spacing(3),\n    padding: theme.spacing(3),\n  },\n  passwordContainer: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nexport default function PasswordGenerator() {\n  const classes = useStyles();\n  const [size, setSize] = useState(9);\n  const [options, setOptions] = useState({\n    lowercase: true,\n    numbers: true,\n    symbols: true,\n    uppercase: true,\n  });\n  const [password, setPassword] = useState(generate(options, size));\n\n  function copyToClipboard() {\n    navigator.clipboard.writeText(password);\n  }\n\n  function refreshPassword(_options, _size) {\n    setPassword(generate(_options, _size));\n  }\n\n  function optionsChanged(_options) {\n    setOptions(_options);\n    refreshPassword(_options);\n  }\n\n  function sizeChanged(_size) {\n    setSize(_size);\n    refreshPassword(options, _size);\n  }\n\n  return (\n    <Grid container direction=\"column\" className={classes.root}>\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-between\"\n        className={classes.passwordContainer}\n      >\n        <Typography>\n          {password ? password : 'Please select a password option'}\n        </Typography>\n\n        <Box>\n          <Button onClick={copyToClipboard}>\n            <FileCopy />\n          </Button>\n          <Button onClick={() => refreshPassword(options)}>\n            <Refresh />\n          </Button>\n        </Box>\n      </Grid>\n\n      <Grid container direction=\"row\" justify=\"space-around\">\n        <PasswordOptions options={options} changeHandler={optionsChanged} />\n        <PasswordLength size={size} changeHandler={sizeChanged} />\n      </Grid>\n    </Grid>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport { Container, Grid, Typography } from '@material-ui/core';\nimport PasswordGenerator from './password-generator/PasswordGenerator';\n\nfunction App() {\n  return (\n    <Container maxWidth=\"sm\" fixed>\n      <Grid container direction=\"column\" justify=\"flex-start\" className=\"App\">\n        <Typography variant=\"h1\" component=\"h1\">\n          Password Generator\n        </Typography>\n\n        <PasswordGenerator></PasswordGenerator>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}